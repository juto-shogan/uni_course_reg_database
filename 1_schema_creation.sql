-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;

--- Schema creation start ---

--- Table for students ---
CREATE TABLE IF NOT EXISTS public.students
(
    student_id bigserial NOT NULL,
    username character varying(255) NOT NULL,
    matric_number bigint character varying(255) NOT NULL,
    first_name character varying(255) NOT NULL,
    last_name character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    major_department_id bigint NOT NULL,
    phone_number character varying(255) NOT NULL,
    DOB date NOT NULL,
    address text NOT NULL,
    CONSTRAINT pk_student_id PRIMARY KEY (student_id),
    CONSTRAINT uq1_email UNIQUE (email)
);

COMMENT ON TABLE public.students 
    IS 'a table for the the students info';
COMMENT ON CONSTRAINT pk_student_id ON public.students
    IS 'primary key for student_id';

COMMENT ON CONSTRAINT uq1_email ON public.students
    IS 'unique entity: email';

--- Table for departments ---
CREATE TABLE IF NOT EXISTS public.department
(
    faculty_id bigint NOT NULL,
    department_id bigserial NOT NULL,
    department_name character varying NOT NULL,
    head_of_dept character varying,
    CONSTRAINT pk_dept_id PRIMARY KEY (department_id)
);

COMMENT ON TABLE public.department
    IS 'about faculties and departments';

--- Table for courses ---
CREATE TABLE IF NOT EXISTS public.courses
(
    course_id bigserial NOT NULL,
    course_code character varying(255) NOT NULL,
    course_title character varying(255) NOT NULL,
    credits integer NOT NULL,
    department_id bigint NOT NULL,
    description text NOT NULL,
    max_capacity integer NOT NULL,
    -- REMOVED: prerequisites_id as this is handled by course_prerequisites table
    CONSTRAINT pk_course_id PRIMARY KEY (course_id),
    CONSTRAINT uq_course_code UNIQUE (course_code)
);

COMMENT ON TABLE public.courses
    IS 'for courses offered specific to each faculty';
COMMENT ON CONSTRAINT pk_course_id ON public.courses
    IS 'primary key for course_id';

COMMENT ON CONSTRAINT uq_course_code ON public.courses
    IS 'unique course codes for each course';

--- Table for financial aid information ---
CREATE TABLE IF NOT EXISTS public.financial_aid
(
    "financial_aid_ID" bigserial NOT NULL, -- Added as PK
    student_id bigint NOT NULL,
    eligibility boolean NOT NULL,
    "amount " integer NOT NULL,
    aid_type character varying(255) NOT NULL,
    application_date date NOT NULL,
    award_date date NOT NULL,
    CONSTRAINT pk_financial_aid_id PRIMARY KEY ("financial_aid_ID") -- PK defined
);

COMMENT ON TABLE public.financial_aid
    IS 'financial Aid info table for checking eligibility';
COMMENT ON CONSTRAINT pk_financial_aid_id ON public.financial_aid
    IS 'Primary key for financial_aid_ID';

--- Table for semesters ---
CREATE TABLE IF NOT EXISTS public.semester
(
    semester_id bigserial,
    semester character varying,
    CONSTRAINT pk_semester_id PRIMARY KEY (semester_id)
);

COMMENT ON CONSTRAINT pk_semester_id ON public.semester
    IS 'primary key for semester_Id';

--- Table for instructors ---
CREATE TABLE IF NOT EXISTS public.instructors
(
    instructor_id bigserial NOT NULL,
    department_id bigint NOT NULL,
    first_name character varying(255) NOT NULL,
    last_name character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    phone_number character varying(255) NOT NULL, -- Corrected to VARCHAR
    hire_date date NOT NULL,
    CONSTRAINT pk_instructor_id PRIMARY KEY (instructor_id),
    CONSTRAINT uq2_email UNIQUE (email) -- Removed INCLUDE(email) as redundant
);

COMMENT ON TABLE public.instructors
    IS 'for instructor info';

COMMENT ON CONSTRAINT uq2_email ON public.instructors
    IS 'unique email address';

--- Table for faculty ---
CREATE TABLE IF NOT EXISTS public.faculty
(
    faculty_id bigserial NOT NULL,
    faculty_name character varying(255) NOT NULL,
    head_of_faculty character varying(255) NOT NULL,
    number_of_departments integer NOT NULL,
    CONSTRAINT pk_faculty_id PRIMARY KEY (faculty_id)
);

COMMENT ON TABLE public.faculty
    IS 'basic faculty info';
COMMENT ON CONSTRAINT pk_faculty_id ON public.faculty
    IS 'primary key for faculty_id';

--- Table for course offerings ---
CREATE TABLE IF NOT EXISTS public.course_offering
(
    offering_id bigserial NOT NULL, -- Corrected to bigserial for auto-incrementing PK
    course_id bigint NOT NULL,
    instructor_id bigint NOT NULL,
    semester_id bigint NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    location text NOT NULL,
    capacity integer NOT NULL,
    CONSTRAINT pk_offering_id PRIMARY KEY (offering_id)
);

COMMENT ON TABLE public.course_offering
    IS 'for courses being offered informations';
COMMENT ON CONSTRAINT pk_offering_id ON public.course_offering
    IS 'Primary key for offering_id';

--- Table for student enrollments ---
CREATE TABLE IF NOT EXISTS public.enrollment
(
    enrollment_id bigserial NOT NULL,
    student_id bigint NOT NULL,
    offering_id bigint NOT NULL, -- CRITICAL: Changed from course_id to offering_id
    enrollment_date date NOT NULL,
    grade text NULL, -- CRITICAL: Changed to NULL (nullable)
    CONSTRAINT pk_enrollment_id PRIMARY KEY (enrollment_id),
    CONSTRAINT uq_student_offering UNIQUE (student_id, offering_id) -- CRITICAL: Added unique constraint
);

COMMENT ON TABLE public.enrollment
    IS 'table for student course enrollment information, linking to specific course offerings.';
COMMENT ON CONSTRAINT pk_enrollment_id ON public.enrollment
    IS 'primary key for enrollment_id';
COMMENT ON CONSTRAINT uq_student_offering ON public.enrollment
    IS 'Ensures a student can only enroll in a specific course offering once.';

--- Table for course prerequisites ---
CREATE TABLE IF NOT EXISTS public.course_prerequisites
(
    course_id bigint NOT NULL,          -- The course that *has* the prerequisite
    prerequisite_course_id bigint NOT NULL, -- The course that *is* the prerequisite
    CONSTRAINT pk_course_prerequisites PRIMARY KEY (course_id, prerequisite_course_id) -- CRITICAL: Composite Primary Key
);

COMMENT ON TABLE public.course_prerequisites
    IS 'Defines prerequisite relationships between courses (e.g., course_id requires prerequisite_course_id).';
COMMENT ON CONSTRAINT pk_course_prerequisites ON public.course_prerequisites
    IS 'Composite primary key for course and its prerequisite.';

--- Schema creation end ---

--- Table alterations start ---
-- FOREIGN KEY CONSTRAINTS (Corrections applied below)
ALTER TABLE IF EXISTS public.students
    ADD CONSTRAINT fk_dept_id FOREIGN KEY (major_department_id)
    REFERENCES public.department (department_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE; -- REMOVED NOT VALID

COMMENT ON CONSTRAINT fk_dept_id ON public.students
    IS ' foreign key referencing dept_id';


ALTER TABLE IF EXISTS public.department
    ADD CONSTRAINT fk_faculty_id FOREIGN KEY (faculty_id)
    REFERENCES public.faculty (faculty_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION; -- REMOVED NOT VALID
	
COMMENT ON CONSTRAINT fk_faculty_id ON public.department
    IS 'foreign key referencing the faculty id';


ALTER TABLE IF EXISTS public.courses
    ADD CONSTRAINT fk_dept_id FOREIGN KEY (department_id)
    REFERENCES public.department (department_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE; -- REMOVED NOT VALID

COMMENT ON CONSTRAINT fk_dept_id ON public.courses
    IS ' foreign key referencing  dept id';


-- REMOVED: ALTER TABLE courses ADD CONSTRAINT fk_prerequisites_id (This FK is no longer needed as prerequisites_id was removed from courses)


ALTER TABLE IF EXISTS public.financial_aid
    ADD CONSTRAINT fk_student_id FOREIGN KEY (student_id)
    REFERENCES public.students (student_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE; -- REMOVED NOT VALID

COMMENT ON CONSTRAINT fk_student_id ON public.financial_aid
    IS ' foreign key referencing student id';


ALTER TABLE IF EXISTS public.instructors
    ADD CONSTRAINT fk_dept_id FOREIGN KEY (department_id)
    REFERENCES public.department (department_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE; -- REMOVED NOT VALID

COMMENT ON CONSTRAINT fk_dept_id ON public.instructors
    IS 'foreign key referencing the dept id';


ALTER TABLE IF EXISTS public.course_offering
    ADD CONSTRAINT fk_course_id FOREIGN KEY (course_id)
    REFERENCES public.courses (course_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION; -- REMOVED NOT VALID

COMMENT ON CONSTRAINT fk_course_id ON public.course_offering
    IS 'foreign key referencing course_id';


ALTER TABLE IF EXISTS public.course_offering
    ADD CONSTRAINT fk_instructor_id FOREIGN KEY (instructor_id)
    REFERENCES public.instructors (instructor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION; -- REMOVED NOT VALID

COMMENT ON CONSTRAINT fk_instructor_id ON public.course_offering
    IS ' foreign key referencing instructor_id';


ALTER TABLE IF EXISTS public.course_offering
    ADD CONSTRAINT fk_semsester_id FOREIGN KEY (semester_id)
    REFERENCES public.semester (semester_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION; -- REMOVED NOT VALID

COMMENT ON CONSTRAINT fk_semsester_id ON public.course_offering
    IS ' foreign key referencing for semester_id';


ALTER TABLE IF EXISTS public.enrollment
    ADD CONSTRAINT fk_student_id FOREIGN KEY (student_id)
    REFERENCES public.students (student_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE; -- REMOVED NOT VALID

COMMENT ON CONSTRAINT fk_student_id ON public.enrollment
    IS ' foreign key referencing student_ID';


ALTER TABLE IF EXISTS public.enrollment
    ADD CONSTRAINT fk_offering_id FOREIGN KEY (offering_id) -- CRITICAL: Renamed and referencing offering_id
    REFERENCES public.course_offering (offering_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE; -- REMOVED NOT VALID

COMMENT ON CONSTRAINT fk_offering_id ON public.enrollment
    IS 'foreign key referencing offering_id';


ALTER TABLE IF EXISTS public.course_prerequisites
    ADD CONSTRAINT fk_course_id FOREIGN KEY (course_id)
    REFERENCES public.courses (course_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE; -- REMOVED NOT VALID

COMMENT ON CONSTRAINT fk_course_id ON public.course_prerequisites
    IS 'foreign key referencing the course that *has* the prerequisite';

-- CRITICAL: Added second foreign key for prerequisite_course_id
ALTER TABLE IF EXISTS public.course_prerequisites
    ADD CONSTRAINT fk_prerequisite_course_id FOREIGN KEY (prerequisite_course_id)
    REFERENCES public.courses (course_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE; -- REMOVED NOT VALID

COMMENT ON CONSTRAINT fk_prerequisite_course_id ON public.course_prerequisites
    IS 'foreign key referencing the course that *is* the prerequisite';
COMMIT;
END;